;====================================================================
; Main.asm file generated by New Project wizard
;
; Created:   Mon Oct 17 2022
; Processor: 8086
; Compiler:  MASM32
;
; Before starting simulation set Internal Memory Size 
; in the 8086 model properties to 0x10000
;====================================================================

; DUMALAGAN_LE6-1

DATA SEGMENT
      PORTA EQU 0F0H ; PORTA address
      PORTB EQU 0F2H ; PORTB address
      PORTC EQU 0F4H ; PORTC address
      COM_REG EQU 0F6H ; Command Register Address
      
      ; LCD message strings
      MSG1 DB "HELLO JIN!","$"
DATA ENDS

CODE SEGMENT PUBLIC 'CODE'
      ASSUME CS:CODE
      
      ORG 0000H
      MOV SI, 0000H
      XOR AX, AX
      XOR BX, BX
      XOR DX, DX
START:
      ; Configuring the 8255
      MOV DX, COM_REG 	; set the address
      MOV AL, 10001001B	; command byte
      OUT DX, AL 	; send the command byte
      
      CALL INIT_LCD	; initialize LCD
      
      MOV AL, 0C7H 	; set cursor location
      CALL INST_CTRL	; send instruction to LCD
      
      LEA SI, MSG1	; load string to display
      CALL DISP_STR	; call module to display string
      
      ENDLESS:
	    JMP ENDLESS
	 
      ; MODULE: Initialize LCD
      INIT_LCD:
    	 MOV AL, 38H	; 8-bit interface, dual-line display
    	 CALL INST_CTRL ; write instruction to LCD
    	 MOV AL, 08H	; display off, cursor off, blink off
    	 CALL INST_CTRL	; write instruction to LCD
    	 MOV AL, 01H	; clear display
    	 CALL INST_CTRL ; write instruction to LCD
    	 MOV AL, 06H	; increment cursor, display shift off
    	 CALL INST_CTRL ; write instruction to LCD
    	 MOV AL, 0CH	; display on, cursor off, blink off
    	 CALL INST_CTRL ; write instruction to LCD
      RET
      
      ; MODULE: Send instruction to LCD
      INST_CTRL:
    	 PUSH AX 	; preserve value of AL
    	 MOV DX, PORTA 	; set port of LCD data bus (PORTA)
    	 OUT DX, AL 	; write data in AL to PORTA
    	 MOV DX, PORTB 	; set port of LCD control lines (PORTB)
    	 MOV AL, 02H 	; E=1, RS=0 (access instruction reg)
    	 OUT DX, AL 	; write data in AL to PORTB
    	 CALL DELAY_1MS ; delay for 1 ms
    	 MOV DX, PORTB 	; set port of LCD control lines (PORTB)
    	 MOV AL, 00H 	; E=0, RS=0
    	 OUT DX, AL 	; write data in AL to PORTB
    	 POP AX 	; restore value of AL
      RET
      
      ; MODULE: Send data to LCD
      DATA_CTRL:
    	 PUSH AX 	; preserve value of AL
    	 MOV DX, PORTA 	; set port of LCD data bus (PORTA)
    	 OUT DX, AL 	; write data in AL to PORTA
    	 MOV DX, PORTB 	; set port of LCD control lines (PORTB)
    	 MOV AL, 03H 	; E=1, RS=1 (access data register)
    	 OUT DX, AL 	; write data in AL to PORTB
    	 CALL DELAY_1MS ; delay for 1 ms
    	 MOV DX, PORTB 	; set port of LCD control lines (PORTB)
    	 MOV AL, 01H 	; E=0, RS=1
    	 OUT DX, AL 	; write data in AL to PORTB
    	 POP AX 	; restore value of AL
      RET
      
      ; MODULE: Display string
      DISP_STR:
    	 MOV AX, [SI]
    	 CMP AL, '$'
    	 JE EXIT 
    	 CALL DATA_CTRL
    	 INC SI
    	 JMP DISP_STR
      RET
      
      ; MODULE: Delay for 1 millisecond
      DELAY_1MS:
	    MOV BX, 02CAH   
      L1:
    	 DEC BX
    	 NOP
    	 JNZ L1
      RET
      
      ; MODULE: Exit here
      EXIT:
	    RET   
      
CODE ENDS
END START